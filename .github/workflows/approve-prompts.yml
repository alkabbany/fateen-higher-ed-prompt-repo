name: Approve and Move Prompts

on:
  issue_comment:
    types: [created]

jobs:
  process_prompt:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Debug Prompt Extraction
      run: |
        awk '/^### /,/^---$/' prompts/pending-approval.md | head -n 15

    - name: Check for Approval
      if: github.event.comment.body == '✅ Approved'
      run: |
        PROMPT_ENTRY=$(awk '/^### /,/^---$/' prompts/pending-approval.md)
        if [[ -z "$PROMPT_ENTRY" ]]; then
          echo "Error: No prompt found! Check pending-approval.md format."
          exit 1
        fi
        echo "Extracted Prompt: $PROMPT_ENTRY"

        # ✅ Extract and clean department name
        DEPARTMENT=$(echo "$PROMPT_ENTRY" | sed -n 's/^.*\*\*Department:\*\*: \(.*\)$/\1/p' | tr -d '\r' | xargs)
        echo "DEBUG: Extracted Department: '$DEPARTMENT'"

        # ✅ Define list of valid department names
        DEPARTMENTS=("Architectural Engineering"
                     "Computer Engineering"
                     "Chemical and Petrochemical Engineering"
                     "Construction and Building Engineering"
                     "Electronics and Communications Engineering"
                     "Electrical and Control Engineering"
                     "Industrial and Management Engineering"
                     "Marine and Offshore Engineering"
                     "Mechanical Engineering"
                     "Oil and Gas Engineering")

        # ✅ Define corresponding file paths
        FILES=("prompts/engineering-architectural.md"
               "prompts/engineering-computer.md"
               "prompts/engineering-chemical.md"
               "prompts/engineering-construction.md"
               "prompts/engineering-electronics.md"
               "prompts/engineering-electrical.md"
               "prompts/engineering-industrial.md"
               "prompts/engineering-marine.md"
               "prompts/engineering-mechanical.md"
               "prompts/engineering-oil.md")

        # ✅ Find the closest match (Balanced Algorithm)
        BEST_MATCH=""
        BEST_INDEX=0
        MIN_DISTANCE=99999
        MAX_COMMON_WORDS=0

        for i in "${!DEPARTMENTS[@]}"; do
            CURRENT_DEPT="${DEPARTMENTS[$i]}"
            read DISTANCE COMMON_WORDS <<< $(echo "$DEPARTMENT $CURRENT_DEPT" | awk '{
                split(tolower($1), a, " ")
                split(tolower($2), b, " ")
                d = 0
                common = 0
                for (i in a) {
                    if (a[i] in b) { common++ } else { d++ }
                }
                print d, common
            }')

            # ✅ Keep track of the best match based on word similarity
            if [[ $DISTANCE -lt $MIN_DISTANCE || ($DISTANCE -eq $MIN_DISTANCE && $COMMON_WORDS -gt $MAX_COMMON_WORDS) ]]; then
                MIN_DISTANCE=$DISTANCE
                MAX_COMMON_WORDS=$COMMON_WORDS
                BEST_MATCH=$CURRENT_DEPT
                BEST_INDEX=$i
            fi
        done

        # ✅ Debug output for matching logic
        echo "DEBUG: Closest Matched Department: '$BEST_MATCH' (Distance: $MIN_DISTANCE, Common Words: $MAX_COMMON_WORDS)"

        # ✅ First, check for an exact match
        for i in "${!DEPARTMENTS[@]}"; do
            if [[ "$DEPARTMENT" == "${DEPARTMENTS[$i]}" ]]; then
                TARGET_FILE="${FILES[$i]}"
                echo "DEBUG: Exact Match Found - Moving to $TARGET_FILE"
                break
            fi
        done

        # ✅ If no exact match, use closest match
        if [[ -z "$TARGET_FILE" && $MIN_DISTANCE -lt 5 && $MAX_COMMON_WORDS -ge 1 ]]; then
            TARGET_FILE="${FILES[$BEST_INDEX]}"
        else
            TARGET_FILE="prompts/general.md"
        fi

        echo "DEBUG: Extracted Department: '$DEPARTMENT'"
        echo "DEBUG: Closest Matched Department: '$BEST_MATCH' (Distance: $MIN_DISTANCE, Common Words: $MAX_COMMON_WORDS)'"
        
        # ✅ Remove the department line before saving the prompt
        echo "$PROMPT_ENTRY" | sed '/\*\*Department:\*\*/d' >> "$TARGET_FILE"

        # ✅ Remove the prompt from pending-approval.md
        awk 'BEGIN{found=0} /^### /{found=1} found && /^---$/{found=0; next} !found' prompts/pending-approval.md > temp.md && mv temp.md prompts/pending-approval.md

        git config --global user.name 'github-actions'
        git config --global user.email 'actions@github.com'
        git add prompts/*
        git commit -m "Approved prompt moved to $TARGET_FILE"
        git push
